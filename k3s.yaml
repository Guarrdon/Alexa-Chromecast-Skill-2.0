apiVersion: apps/v1
kind: Deployment
metadata:
  name: alexa-skill-chromecast
  labels:
    app: alexa-skill-chromecast
  namespace: alexa-chromecast
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alexa-skill-chromecast
  template:
    metadata:
      labels:
        app: alexa-skill-chromecast
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:                                 
          requiredDuringSchedulingIgnoredDuringExecution:   # <---- hard requirement not to schedule "nginx" pod if already one scheduled.
          - topologyKey: kubernetes.io/hostname     # <---- Anti affinity scope is host     
            labelSelector:                               
              matchLabels:                               
                app: alexa-skill-chromecast
      containers:
      - name: alexa-skill-chromecast
        image: guarrdon/alexa-skill-chromecast:v2
        env:
        - name: AWS_ACCESS_KEY_ID
          value: ""
        - name: AWS_DEFAULT_REGION
          value: ""
        - name: AWS_SECRET_ACCESS_KEY 
          value: ""
        - name: AWS_SNS_TOPIC_ARN
          value: ""
        - name: EXTERNAL_PORT 
          value: "35075"
---
# Service account the client will use to reset the deployment,
# by default the pods running inside the cluster can do no such things.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: deployment-restart
  namespace: alexa-chromecast
---
# allow getting status and patching only the one deployment you want
# to restart
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-restart
  namespace: alexa-chromecast
rules:
  - apiGroups: ["*"]
    resources: ["deployments", "pods"]
    verbs: ["get", "list","patch", "watch" ]
---
# bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: deployment-restart
  namespace: alexa-chromecast
roleRef:
  apiGroup: "" 
  kind: Role
  name: deployment-restart
subjects:
  - kind: ServiceAccount
    name: deployment-restart
    namespace: alexa-chromecast
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: deployment-restart
  namespace: alexa-chromecast
spec:
  concurrencyPolicy: Forbid
  schedule: '0 20 * * *' # cron spec of time, here, 8 o'clock (pm)
  jobTemplate:
    spec:
      backoffLimit: 2 # this has very low chance of failing, as all this does
                      # is prompt kubernetes to schedule new replica set for
                      # the deployment
      activeDeadlineSeconds: 600 # timeout, makes most sense with 
                                 # "waiting for rollout" variant specified below
      template:
        spec:
          serviceAccountName: deployment-restart # name of the service
                                                 # account configured above
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl # probably any kubectl image will do,
                                     # optionaly specify version, but this
                                     # should not be necessary, as long the
                                     # version of kubectl is new enough to
                                     # have `rollout restart`
              command:
                - 'kubectl'
                - 'rollout'
                - 'restart'
                - 'deployment/alexa-skill-chromecast'

